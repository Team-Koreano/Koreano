plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'org.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

bootJar.enabled = false

subprojects {

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    repositories {
        mavenCentral()
    }

    // 관리하는 모듈의 공통 dependencies
    dependencies {

    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.1"
        }
    }

    jacoco {
        toolVersion = '0.8.10'
        setReportsDirectory(file("${rootDir}/build/code-coverage"))
    }

    test {
        tasks.named('test') {
            useJUnitPlatform()
            systemProperty "jasypt.encryptor.password", project.getProperties().get("jasypt.encryptor.password")
        }
        useJUnitPlatform()
        finalizedBy 'jacocoTestReport'
    }

    jacocoTestReport {
        reports {
            html.required = true
            xml.required = true
        }

        // 결과 리포트에서 제외할 클래스들
        def Qdomains = []
        for (qPattern in '**/QA'..'**/QZ') {
            Qdomains.add(qPattern + '*')
        }

        afterEvaluate {
            classDirectories.setFrom(
                    files(classDirectories.files.collect {
                        fileTree(dir: it, excludes: [
                                "**/*Application*",
                                "**.*Provider*",
                                "**/*Config*",
                                "**/*Dto*",
                                "**/*Request*",
                                "**/*Response*",
                                "**/*Exception*"
                        ] + Qdomains)
                    })
            )
        }
        finalizedBy 'jacocoTestCoverageVerification'
    }

    jacocoTestCoverageVerification {
        def Qdomains = []
        for (qPattern in '*.QA'..'*.QZ') {
            Qdomains.add(qPattern + '*')
        }

        violationRules {
            rule {
                enabled = true
                element = 'CLASS'
                includes = []

                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.00
                }

                excludes = [
                        "**.*Application*",
                        "**.*Provider*",
                        "**.*Config*",
                        "**.*Dto*",
                        "**.*Request*",
                        "**.*Response*",
                        "**.*Exception*"
                ] + Qdomains
            }
        }
    }
    sourceCompatibility = '17'
}
