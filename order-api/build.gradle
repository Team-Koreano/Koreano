plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
}

dependencies {
    implementation(project(':common'))

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // lombok
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // mapstruct
    annotationProcessor("org.mapstruct:mapstruct-processor:1.5.3.Final")
    testAnnotationProcessor("org.mapstruct:mapstruct-processor:1.5.3.Final")
    implementation("org.mapstruct:mapstruct:1.5.3.Final")
    implementation("org.projectlombok:lombok-mapstruct-binding:0.2.0")

    // @VisibleForTesting 의존성
    implementation 'com.google.guava:guava:32.1.2-jre'
    implementation 'com.google.auto.value:auto-value-annotations:1.8'

    // h2
    runtimeOnly 'com.h2database:h2'

    // redis client
    implementation 'org.redisson:redisson-spring-boot-starter:3.29.0'

    // embedded redis
    implementation 'it.ozimov:embedded-redis:0.7.2'
    testImplementation 'it.ozimov:embedded-redis:0.7.2'

    // mockito
    testImplementation 'org.mockito:mockito-core:5.11.0'

    // openfeign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // kafka
    implementation 'org.springframework.kafka:spring-kafka'

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.1"
        }
    }
}

tasks.register("prepareKotlinBuildScriptModel"){}


clean {
    delete file('src/main/generated')
}

